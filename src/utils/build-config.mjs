import * as fs from "node:fs";
import * as path from "node:path";
import { fileURLToPath } from "node:url";
import * as TOML from "@iarna/toml";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const configPath = path.join(__dirname, "../../config.toml");
const outputPath = path.join(__dirname, "generated-config.ts");

function generateConfig() {
	try {
		const tomlContent = fs.readFileSync(configPath, "utf-8");
		const parsed = TOML.parse(tomlContent);

		// Transform navbar links to handle LinkPreset
		if (parsed.navBar?.links) {
			parsed.navBar.links = parsed.navBar.links.map((link) => {
				if (typeof link.preset === "number") {
					return link.preset;
				}
				return link;
			});
		}

		// Filter out empty favicon entries
		if (parsed.site?.favicon) {
			parsed.site.favicon = parsed.site.favicon.filter(
				(favicon) => favicon.src,
			);
		}

		const configCode = `// This file is auto-generated from config.toml
// Do not edit this file directly
export const tomlConfig = ${JSON.stringify(parsed, null, 2)};
`;

		fs.writeFileSync(outputPath, configCode);
		console.log("Generated config from TOML file");
	} catch (error) {
		// Generate empty config if TOML file doesn't exist or can't be parsed
		const configCode = `// This file is auto-generated
// Do not edit this file directly
export const tomlConfig = {};
`;
		fs.writeFileSync(outputPath, configCode);
		console.warn("Generated empty config (TOML file not found or invalid)");
	}
}

generateConfig();
